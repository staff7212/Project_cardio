'use strict';

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputTemp = document.querySelector('.form__input--temp');
const inputClimb = document.querySelector('.form__input--climb');

class Workout {
  date = new Date();
  id = (Date.now() + '').slice(-10);

  constructor(coords, distance, duration) {
    this.coords = coords;
    this.distance = distance; //–∫–º
    this.duration = duration; // –º–∏–Ω
  }

  _setDescription() {
    this.type === 'running'
      ? this.description = `–ü—Ä–æ–±–µ–∂–∫–∞ ${new Intl.DateTimeFormat('ru-RU')
        .format(this.date)}`
      : this.description = `–í–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${new Intl.DateTimeFormat('ru-RU')
        .format(this.date)}`;
  }
}

class Running extends Workout{
  type = 'running';

  constructor(coords, distance, duration, temp) {
    super(coords, distance, duration);
    this.temp = temp;
    this.calculatePace();
    this._setDescription();
  }

  calculatePace() {
    this.pace = this.duration / this.distance;
  }
}

class Cycling extends Workout{
  type = 'cycling';

  constructor(coords, distance, duration, climb) {
    super(coords, distance, duration);
    this.climb = climb;
    this.calculateSpeed();
    this._setDescription();
  }

  calculateSpeed() {
    this.speed = this.distance / (this.duration / 60);
  }
}

// const run = new Running([50, 50], 7, 40, 170);
// const cycl = new Cycling([50, 50], 30, 80, 200);

// console.log(run, cycl);



class App {
  // –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã –∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ
  #map;
  #mapEvent;
  #workouts = [];

  constructor() {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    this._getPosition();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    form.addEventListener('submit', (e) => this._newWorkout(e));
    inputType.addEventListener('change', this._toggleClimbField);
  }

  _getPosition() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition( //–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–µ–Ω–∏—è
        this._loadMap.bind(this), // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–∞—è fun—Å, —Ç–µ—Ä—è–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç
        function (error) {
          alert('Error: ' + error);
        }
      );
    }
  }

  _loadMap(position) {
    const {latitude, longitude} = position.coords;
    console.log(`https://yandex.ru/maps/?ll=${longitude}%2C${latitude}&z=8.49`);
  
    const coords = [latitude, longitude];
  
    this.#map = L.map('map').setView(coords, 13); // –∫–∞—Ä—Ç—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Leaflet

    L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png', {
      maxZoom: 20,
      attribution: '&copy; <a href="https://stadiamaps.com/">Stadia Maps</a>, &copy; <a href="https://openmaptiles.org/">OpenMapTiles</a> &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors'
    }).addTo(this.#map);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
    this.#map.on('click', (e) => this._showForm(e));
  }

  _showForm(e) {
    this.#mapEvent = e;

    form.classList.remove('hidden'); // –ø–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã
    inputDistance.focus(); // –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
  }

  _hideForm() {
    inputDistance.value =
    inputDuration.value =
    inputTemp.value =
    inputClimb.value = '';
    form.classList.add('hidden');
  }

  _toggleClimbField() {
    inputClimb.closest('.form__row').classList.toggle('form__row--hidden');
    inputTemp.closest('.form__row').classList.toggle('form__row--hidden');
  }

  _newWorkout(e) {
    e.preventDefault();
    const {lat,lng} = this.#mapEvent.latlng; //–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    let workout;

    // —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—Ç, –≤–µ—Ä–Ω–µ—Ç —á–∏—Å–ª–æ
    const areNumber = (...numbers) => numbers.every(num => Number.isFinite(num));

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;


    // –ï—Å–ª–∏ –ø—Ä–æ–±–µ–∂–∫–∞ - –æ–±—ä–µ–∫—Ç Running
    if (type === 'running') {
      const temp = +inputTemp.value;
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(temp)
        !areNumber(distance, duration, temp)
      )
        return alert('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ');
      workout = new Running( [lat, lng], distance, duration, temp);
    }
    // –ï—Å–ª–∏ –≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - –æ–±—ä–µ–∫—Ç Cycling
    if (type === 'cycling') {
      const climb = +inputClimb.value;
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(climb)
        !areNumber(distance, duration, climb)
      )
        return alert('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ');
      workout = new Cycling( [lat, lng], distance, duration, climb);
    }
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    this.#workouts.push(workout);

    //–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ
    this._displayWorkout(workout);

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Å–ø–∏—Å–∫–µ
    this._displayWorkoutOnSidebar(workout);

    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∏ —Å–∫—Ä—ã—Ç–∏–µ –µ—ë
    this._hideForm();
  
  } 

  _displayWorkout(workout) {
    L.marker(workout.coords)
    .addTo(this.#map)
    .bindPopup(L.popup({ //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä–∫–µ—Ä–∞
      autoClose: false,
      closeOnClick: false,
      className: `${workout.type}-popup`
    }))
    .setPopupContent(`${workout.type === 'running' ? 'üèÉ': 'üöµ'} ${workout.description}`) // –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ä–µ
    .openPopup();
  }

  _displayWorkoutOnSidebar(workout) {
    let html = `
    <li class="workout workout--${workout.type}" data-id="${workout.id}">
    <h2 class="workout__title">${workout.description}</h2>
      <div class="workout__details">
        <span class="workout__icon">${workout.type === 'running' ? 'üèÉ': 'üöµ'}</span>
        <span class="workout__value">${workout.distance}</span>
        <span class="workout__unit">–∫–º</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">‚è±</span>
        <span class="workout__value">${workout.duration}</span>
        <span class="workout__unit">–º–∏–Ω</span>
      </div>
    `;

    if (workout.type === 'running') {
      html += `
        <div class="workout__details">
          <span class="workout__icon">üìè‚è±</span>
          <span class="workout__value">${workout.pace.toFixed(1)}</span>
          <span class="workout__unit">–º–∏–Ω/–∫–º</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">üëü‚è±</span>
          <span class="workout__value">${workout.temp}</span>
          <span class="workout__unit">—à–∞–≥/–º–∏–Ω</span>
        </div>
      </li>
      `;
    }

    if (workout.type === 'cycling') {
      html += `
        <div class="workout__details">
          <span class="workout__icon">üìè‚è±</span>
          <span class="workout__value">${workout.speed.toFixed(1)}</span>
          <span class="workout__unit">–∫–º/—á</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">üèî</span>
          <span class="workout__value">${workout.climb}</span>
          <span class="workout__unit">–º</span>
        </div>
      </li>
      `;
    }
    form.insertAdjacentHTML('afterend', html);
  }
}

const app = new App();




// –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö



